On hub
(  Model Name:	MacBook Pro
   Model Identifier:	MacBookPro12,1
   Processor Name:	Intel Core i5
   Processor Speed:	2.7 GHz
   Number of Processors:	1
   Total Number of Cores:	2
   L2 Cache (per Core):	256 KB
   L3 Cache:	3 MB
   Memory:	8 GB
)

Python networkx

graph20: 0m0.681s (89)
graph30: 0m0.524s (2224)
graph35: 4m20.716s (6973630)
graph37: 7m44.941s (10251413)
graph40: segfault

Python naive

graph20: 0m0.064s
graph30: 0m0.120s
graph35: 8m3.206s
graph37:

Kotlin (sequence builder)
graph20: 0m1.569s
graph30: 0m1.706s
graph35: 0m51.490s
graph37: 0m31.263s (10251413)
graph40: > 50 min

Kotlin (Callables)
grahp35: 0m33.511s
graph37: 0m33.571s

Kotlin (using deferred rather than callable)
graph37: 0m34.971s

Go Sync
20: 0m0.335s
35: 0m53.051s

Go GoRoutines
20: 0m0.577s
35: 0m39.169s

many attempts to improve go failed

Scala Sync
20: 0m0.743s
35: 0m40.640s

Scala Futures
20: 0m0.742s
35: 0m27.729s

rust sync 
35: 0m24.002s

rust threads
35: 0m16.283s

Julia sync
20: 0m0.753s
35: 4m50.854s

Clojure sync
35: 2m58.713s

Clojure reducer
35:

Haskell (naive list Elem, single thread)
35: 1m58.229s

Haskell (set, single thread)
35: 1m1.490s

OCaml (set, single thread)
35: 1m37.894s
NEVER WRITE OCAML. IT'S HORRIBLE. IT CAN NEVER BE WORTH IT!!!!! 
YOU KNEW THIS WAS TRUE LAST TIME YOU DID THIS. DON'T MAKE THIS MISTAKE AGAIN

FSharp (set, single, using Mono)
35: 3m5.610s

Java 8 (ArrayList, Simple Threads)
35: 0m34.224s

Dart (List, Async (maybe not working), CLI with Dart VM)
35: 1m28.335s

Dart (web, chrome)
35: 129.820 sec


KotlinJS (web, chrome, sequencebuilder sync)
35: 319.434 sec


KotlinJS (web, chrome, trivial sync)
35: 312.748 sec

ScalaJS (web, chrome, trivial port of server sync)
35: 300.154 sec

PureScript (CLI using pulp)
35: 698.206 sec

PureScript (chrome)
35: 498.290

JavaScript (Chrome. Naive implementation)
35: 82.177 sec

TypeScript (Chrome)
35: 81.091 sec








 

-------------------- Other Machines -------------------------
On inflection (Linux desktop. Intel(R) Core(TM) i7-6700 CPU @ 3.40GHz, 16GB RAM)

Python networkx
35: 2m10.714s

Python naive
35: 4m28.689s

Kotlin (deferred)
35: 0m18.629s

Kotlin (seq)
35: 0m31.812s

On thinkpad 450s (linux laptop  Intel(R) Core(TM) i7-5600U CPU @ 2.60GHz 8GB)

Python networkx
35:	2m33.024s

Kotlin deferred
35: 0m29.529s

Kotlin seq
35: 0m42.462s

Go sync
20: 0m0.146s
35: 0m51.016s

Go async (1 go routine per vertex)
20: 	0m0.497s
35: 	0m37.903s

Scala sync
20:
35:

Scala async
20: 0m0.505s (requires assembly + java -jar. SBT has high overhead)
35:


On symbolscope local (linux server  Intel(R) Pentium(R) CPU G2030 @ 3.00GHz  8GB)

Python networkx
35:	3m20.748s

Kotlin deferred
35:	0m54.164s

Kotlin seq
35:	0m54.209s

On symbolscope AWS (linux server on AWS micro shard backed by Intel(R) Xeon(R) CPU E5-2676 v3 @ 2.40GHz 1GB)

Python networkx
35:

Kotlin deferred
35:

Kotlin seq
35:


Discarded implementations:


Kotlin (channels) -- bad implementation
graph35: hideous (>13m and throws exceptions

Kotlin (async)  -- bad implementation
graph35: 1m14.727s

Go async (1st try - all goroutines and a monitor channel)
20:	0m0.188s
35: terrible
